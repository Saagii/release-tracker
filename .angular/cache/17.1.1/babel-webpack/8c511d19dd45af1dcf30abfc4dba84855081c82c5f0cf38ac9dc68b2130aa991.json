{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../auth/services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/snack-bar\";\nexport let TokenInterceptor = /*#__PURE__*/(() => {\n  class TokenInterceptor {\n    constructor(authService, router, _snackBar) {\n      this.authService = authService;\n      this.router = router;\n      this._snackBar = _snackBar;\n    }\n    intercept(request, next) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${this.authService.tokenValue}`\n        }\n      });\n      return next.handle(request).pipe(catchError(error => {\n        const errorObject = error.error;\n        if (error.status === 401) {\n          // Redirect to login page or handle unauthorized access\n          this.router.navigate(['/signIn']);\n          console.log(error);\n          this.snackBarMethod(errorObject.errorInfo.errorMessage);\n        } else if (error.status === 403) {\n          // Handle forbidden access\n          this.router.navigate(['/signIn']);\n          this.snackBarMethod('Unauthorized Access. You are signed Out...');\n        }\n        if (errorObject.errorInfo) {\n          this.snackBarMethod(errorObject.errorInfo.errorMessage);\n        }\n        // Propagate the error so it can be handled further downstream\n        return throwError(error);\n      }));\n    }\n    // Common Snackbar Method.\n    snackBarMethod(snackBarMessage) {\n      this._snackBar.open(snackBarMessage, 'Ok', {\n        horizontalPosition: 'center',\n        verticalPosition: 'bottom',\n        duration: 5000\n      });\n      return;\n    }\n    static #_ = this.ɵfac = function TokenInterceptor_Factory(t) {\n      return new (t || TokenInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MatSnackBar));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TokenInterceptor,\n      factory: TokenInterceptor.ɵfac\n    });\n  }\n  return TokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}