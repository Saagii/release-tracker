{"ast":null,"code":"import { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let ReleasesService = /*#__PURE__*/(() => {\n  class ReleasesService {\n    constructor(_httpClient, _router) {\n      this._httpClient = _httpClient;\n      this._router = _router;\n    }\n    /*\n        Get release Configurations\n    */\n    getReleasesConfig() {\n      return this._httpClient.get(`${environment.basePath}/api/releaseConfig`);\n    }\n    /*\n        Add release Configuration Types.\n    */\n    updateReleaseConfigDetails(releaseConfigDetails) {\n      return this._httpClient.put(`${environment.basePath}/api/releaseConfig`, releaseConfigDetails);\n    }\n    /*\n        Delete release Configuration details by type and ID.\n    */\n    deleteReleaseConfigDetailsByTypeAndId(releaseConfigDetailType, id) {\n      return this._httpClient.delete(`${environment.basePath}/api/releaseConfig/${releaseConfigDetailType}/${id}`);\n    }\n    /*\n        Add release Configuration Types.\n    */\n    addReleaseConfigType(releaseTypePayload) {\n      return this._httpClient.post(`${environment.basePath}/api/releaseConfig/types`, releaseTypePayload);\n    }\n    /*\n        Add release Configuration Status.\n    */\n    addReleaseConfigStatus(releaseStatusPayload) {\n      return this._httpClient.post(`${environment.basePath}/api/releaseConfig/status`, releaseStatusPayload);\n    }\n    /*\n        Update release Configuration Members Limit.\n    */\n    updateReleaseConfigTarget(releaseTargetPayload) {\n      return this._httpClient.put(`${environment.basePath}/api/releaseConfig/target`, releaseTargetPayload);\n    }\n    /*\n        Delete release Configuration Types.\n    */\n    deleteReleaseConfigType(releaseTypePayload) {\n      return this._httpClient.put(`${environment.basePath}/api/releaseConfig/types`, releaseTypePayload);\n    }\n    /*\n        Delete release Configuration Status.\n    */\n    deleteReleaseConfigStatus(releaseStatusPayload) {\n      return this._httpClient.put(`${environment.basePath}/api/releaseConfig/status`, releaseStatusPayload);\n    }\n    /*\n        Get release Details\n    */\n    getReleaseDetails(releaseId) {\n      return this._httpClient.get(`${environment.basePath}/api/releases/${releaseId}`);\n    }\n    /*\n        Get release list\n    */\n    getReleasesList() {\n      return this._httpClient.get(`${environment.basePath}/api/releases`);\n    }\n    /*\n        Add release Configuration Status.\n    */\n    createReleaseDetails(releaseDetailsPayload) {\n      return this._httpClient.post(`${environment.basePath}/api/releases`, releaseDetailsPayload);\n    }\n    /*\n        Add release Configuration Status.\n    */\n    updateReleaseDetails(releaseDetailsPayload) {\n      return this._httpClient.put(`${environment.basePath}/api/releases`, releaseDetailsPayload);\n    }\n    static #_ = this.ɵfac = function ReleasesService_Factory(t) {\n      return new (t || ReleasesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ReleasesService,\n      factory: ReleasesService.ɵfac\n    });\n  }\n  return ReleasesService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}