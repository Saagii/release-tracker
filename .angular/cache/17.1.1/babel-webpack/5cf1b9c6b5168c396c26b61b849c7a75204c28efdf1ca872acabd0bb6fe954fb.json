{"ast":null,"code":"import { DialogSharedComponent } from 'src/app/modules/shared/components/dialog/dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/modules/shared/services/status.service\";\nimport * as i2 from \"src/app/modules/main/services/domains.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/progress-spinner\";\nfunction DomainsConfigurationComponent_button_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function DomainsConfigurationComponent_button_15_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.addDomainConfigType());\n    });\n    i0.ɵɵtext(1, \"+ Add\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r0 = i0.ɵɵreference(14);\n    i0.ɵɵproperty(\"disabled\", _r0.value === \"\");\n  }\n}\nfunction DomainsConfigurationComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵelement(1, \"mat-spinner\", 17);\n    i0.ɵɵelementStart(2, \"span\", 18);\n    i0.ɵɵtext(3, \"Adding...\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"diameter\", 20);\n  }\n}\nfunction DomainsConfigurationComponent_div_17_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 21)(1, \"div\", 22);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 23)(4, \"div\", 24);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function DomainsConfigurationComponent_div_17_div_1_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const type_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.navigationActions(type_r11, \"type\"));\n    });\n    i0.ɵɵelementStart(7, \"mat-icon\");\n    i0.ɵɵtext(8, \"remove_circle_outline\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const type_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(type_r11.value);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r10.getStatusStyle(type_r11.status));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(type_r11.status);\n  }\n}\nfunction DomainsConfigurationComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtemplate(1, DomainsConfigurationComponent_div_17_div_1_Template, 9, 3, \"div\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.domainConfig.types);\n  }\n}\nfunction DomainsConfigurationComponent_button_29_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function DomainsConfigurationComponent_button_29_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.addDomainConfigStatus());\n    });\n    i0.ɵɵtext(1, \"+ Add\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r4 = i0.ɵɵreference(28);\n    i0.ɵɵproperty(\"disabled\", _r4.value === \"\");\n  }\n}\nfunction DomainsConfigurationComponent_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵelement(1, \"mat-spinner\", 17);\n    i0.ɵɵelementStart(2, \"span\", 18);\n    i0.ɵɵtext(3, \"Adding...\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"diameter\", 20);\n  }\n}\nfunction DomainsConfigurationComponent_div_31_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 21)(1, \"div\", 22);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 23)(4, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function DomainsConfigurationComponent_div_31_div_1_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const status_r17 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.navigationActions(status_r17, \"status\"));\n    });\n    i0.ɵɵelementStart(5, \"mat-icon\");\n    i0.ɵɵtext(6, \"remove_circle_outline\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const status_r17 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(status_r17.value);\n  }\n}\nfunction DomainsConfigurationComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtemplate(1, DomainsConfigurationComponent_div_31_div_1_Template, 7, 1, \"div\", 20);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r7.domainConfig.status);\n  }\n}\nexport let DomainsConfigurationComponent = /*#__PURE__*/(() => {\n  class DomainsConfigurationComponent {\n    constructor(statusService, domainService, fb, dialog) {\n      this.statusService = statusService;\n      this.domainService = domainService;\n      this.fb = fb;\n      this.dialog = dialog;\n      this.domainConfigTypeLoader = false;\n      this.domainConfigStatusLoader = false;\n      // Prepare Domain Type Form\n      this.domainConfigTypeForm = this.fb.group({\n        domainType: ['']\n      });\n      // Prepare Domain Status Form\n      this.domainConfigStatusForm = this.fb.group({\n        domainStatus: ['']\n      });\n    }\n    ngOnInit() {\n      // Get Domains Configuration Details.\n      this.getDomainsConfigurations();\n    }\n    /*\n      Get Status Style\n    */\n    getStatusStyle(statusValue) {\n      return this.statusService.getStatusStyle(statusValue);\n    }\n    /*\n      Get Domain Configurations.\n    */\n    getDomainsConfigurations() {\n      this.domainService.getDomainsConfig().subscribe(domainConfig => {\n        console.log(domainConfig);\n        this.domainConfig = domainConfig;\n      });\n    }\n    /*\n      Add domain type configuration.\n    */\n    addDomainConfigType() {\n      const domainConfigTypePayload = {\n        domainConfigId: this.domainConfig._id,\n        types: [{\n          value: this.domainConfigTypeForm.get('domainType')?.value,\n          isMandatory: true\n        }]\n      };\n      // Enable Loaded\n      this.domainConfigTypeLoader = true;\n      // Diable types form.\n      this.domainConfigTypeForm.disable();\n      this.domainService.addDomainConfigType(domainConfigTypePayload).subscribe(response => {\n        console.log(response);\n        // Disable Loader\n        this.domainConfigTypeLoader = false;\n        // Enable the form & reset.\n        this.domainConfigTypeForm.enable();\n        this.domainConfigTypeForm.reset();\n        // Get the domain config details.\n        this.getDomainsConfigurations();\n      }, error => {\n        console.log(error);\n        // Disable Loader\n        this.domainConfigTypeLoader = false;\n        // Enable the form.\n        this.domainConfigTypeForm.enable();\n      });\n    }\n    /*\n      Add domain status configuration.\n    */\n    addDomainConfigStatus() {\n      const domainConfigStatusPayload = {\n        domainConfigId: this.domainConfig._id,\n        status: [{\n          value: this.domainConfigStatusForm.get('domainStatus')?.value,\n          isMandatory: true\n        }]\n      };\n      // Enable Loaded\n      this.domainConfigStatusLoader = true;\n      // Diable types form.\n      this.domainConfigStatusForm.disable();\n      this.domainService.addDomainConfigStatus(domainConfigStatusPayload).subscribe(response => {\n        console.log(response);\n        // Disable Loader\n        this.domainConfigStatusLoader = false;\n        // Enable the form & reset.\n        this.domainConfigStatusForm.enable();\n        this.domainConfigStatusForm.reset();\n        // Get the domain config details.\n        this.getDomainsConfigurations();\n      }, error => {\n        console.log(error);\n        // Disable Loader\n        this.domainConfigStatusLoader = false;\n        // Enable the form.\n        this.domainConfigStatusForm.enable();\n      });\n    }\n    /*\n      Delete Domain Config Type.\n    */\n    deleteDomainConfigType(domainTypeId) {\n      const domainConfigTypePayload = {\n        // domainConfigId: this.domainConfig._id,\n        typeId: domainTypeId\n      };\n      this.domainService.deleteDomainConfigType(domainConfigTypePayload).subscribe(response => {\n        console.log(response);\n        // Get the domain config details.\n        this.getDomainsConfigurations();\n      }, error => {\n        console.log(error);\n      });\n    }\n    /*\n      Delete Domain Config Status.\n    */\n    deleteDomainConfigStatus(domainStatusId) {\n      const domainConfigStatusPayload = {\n        // domainConfigId: this.domainConfig._id,\n        statusId: domainStatusId\n      };\n      this.domainService.deleteDomainConfigStatus(domainConfigStatusPayload).subscribe(response => {\n        console.log(response);\n        // Get the domain config details.\n        this.getDomainsConfigurations();\n      }, error => {\n        console.log(error);\n      });\n    }\n    /*\n      Dialog Method: Nav New Menu\n    */\n    navigationActions(actionData, actionType) {\n      this.dialog.open(DialogSharedComponent, {\n        panelClass: ['w-5/12'],\n        data: {\n          type: 'confirmation',\n          confirmationContent: {\n            title: 'Are you sure you want to delete ' + actionData.value + ' from domain ' + actionType + ' ?',\n            subtitle: ''\n          }\n        }\n      }).afterClosed().subscribe(result => {\n        console.log(result);\n        if (result) {\n          if (actionType === 'type') {\n            this.deleteDomainConfigType(actionData._id);\n          }\n          if (actionType === 'status') {\n            this.deleteDomainConfigStatus(actionData._id);\n          }\n        }\n      });\n    }\n    static #_ = this.ɵfac = function DomainsConfigurationComponent_Factory(t) {\n      return new (t || DomainsConfigurationComponent)(i0.ɵɵdirectiveInject(i1.StatusService), i0.ɵɵdirectiveInject(i2.DomainsService), i0.ɵɵdirectiveInject(i3.UntypedFormBuilder), i0.ɵɵdirectiveInject(i4.MatDialog));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DomainsConfigurationComponent,\n      selectors: [[\"app-domains-configuration\"]],\n      decls: 32,\n      vars: 8,\n      consts: [[1, \"w-full\", \"px-16\", \"pb-24\"], [1, \"w-full\"], [1, \"text-xl\"], [1, \"w-full\", \"mt-6\", \"pb-10\", \"border-b\", \"border-gray-200\"], [1, \"text-base\"], [1, \"text-gray-500\", \"text-xs\"], [1, \"w-6/12\", \"flex\", \"items-center\", \"my-3\", 3, \"formGroup\"], [\"appearance\", \"outline\", 1, \"w-9/12\"], [\"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"Add Domain Type\", \"formControlName\", \"domainType\"], [\"domainTypeInput\", \"\"], [\"mat-flat-button\", \"\", \"color\", \"primary\", \"class\", \"!-mt-5 !ml-3\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [\"class\", \"flex items-center\", 4, \"ngIf\"], [\"class\", \"w-6/12 mt-3 border border-gray-200 rounded-md\", 4, \"ngIf\"], [\"type\", \"text\", \"matInput\", \"\", \"placeholder\", \"Add Domain Type\", \"formControlName\", \"domainStatus\"], [\"domainStatusInput\", \"\"], [\"mat-flat-button\", \"\", \"color\", \"primary\", 1, \"!-mt-5\", \"!ml-3\", 3, \"disabled\", \"click\"], [1, \"flex\", \"items-center\"], [3, \"diameter\"], [1, \"ml-2\"], [1, \"w-6/12\", \"mt-3\", \"border\", \"border-gray-200\", \"rounded-md\"], [\"class\", \"w-full flex justify-between items-center py-1 px-3 border-b border-gray-200\", 4, \"ngFor\", \"ngForOf\"], [1, \"w-full\", \"flex\", \"justify-between\", \"items-center\", \"py-1\", \"px-3\", \"border-b\", \"border-gray-200\"], [1, \"w-6/12\"], [1, \"w-auto\", \"flex\", \"items-center\"], [1, \"rounded-full\", \"px-3\", \"py-0.5\", \"flex\", \"items-center\", \"text-xs\", 3, \"ngClass\"], [\"mat-icon-button\", \"\", \"color\", \"warn\", 1, \"!ml-3\", 3, \"click\"]],\n      template: function DomainsConfigurationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n          i0.ɵɵtext(3, \"Domains Configuration\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"div\", 4);\n          i0.ɵɵtext(6, \"Domain Types\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"div\", 5);\n          i0.ɵɵtext(8, \"Provides options to set the type of domain.\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\", 6)(10, \"mat-form-field\", 7)(11, \"mat-label\");\n          i0.ɵɵtext(12, \"Add Domain Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"input\", 8, 9);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(15, DomainsConfigurationComponent_button_15_Template, 2, 1, \"button\", 10)(16, DomainsConfigurationComponent_div_16_Template, 4, 1, \"div\", 11);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(17, DomainsConfigurationComponent_div_17_Template, 2, 1, \"div\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"div\", 3)(19, \"div\", 4);\n          i0.ɵɵtext(20, \"Domain Status\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"div\", 5);\n          i0.ɵɵtext(22, \"Defines domain's ongoing status.\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"div\", 6)(24, \"mat-form-field\", 7)(25, \"mat-label\");\n          i0.ɵɵtext(26, \"Add Domain Status\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(27, \"input\", 13, 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(29, DomainsConfigurationComponent_button_29_Template, 2, 1, \"button\", 10)(30, DomainsConfigurationComponent_div_30_Template, 4, 1, \"div\", 11);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(31, DomainsConfigurationComponent_div_31_Template, 2, 1, \"div\", 12);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"formGroup\", ctx.domainConfigTypeForm);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", !ctx.domainConfigTypeLoader);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.domainConfigTypeLoader);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.domainConfig == null ? null : ctx.domainConfig.types == null ? null : ctx.domainConfig.types.length);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"formGroup\", ctx.domainConfigStatusForm);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", !ctx.domainConfigStatusLoader);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.domainConfigStatusLoader);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.domainConfig == null ? null : ctx.domainConfig.status.length);\n        }\n      },\n      dependencies: [i5.NgClass, i5.NgForOf, i5.NgIf, i6.MatIcon, i7.MatButton, i7.MatIconButton, i8.MatInput, i9.MatFormField, i9.MatLabel, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i10.MatProgressSpinner],\n      encapsulation: 2\n    });\n  }\n  return DomainsConfigurationComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}